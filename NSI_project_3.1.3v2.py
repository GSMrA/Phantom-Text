import tkinter as tk
from tkinter import messagebox, simpledialog
from random import randint
from time import monotonic, sleep
import smtplib
from email.mime.text import MIMEText

# Liste des caract√®res
ressources_caract√®res = [
    "a","b","c","d","e","f","g","h","i","j","k","l","m","n","o","p","q","r","s","t","u","v","w","x","y","z",
    "√†","√¢","√§","√ß","√©","√®","√™","√´","√Æ","√Ø","√¥","√∂","√π","√ª","√º","√ø","≈ì","√¶",
    "A","B","C","D","E","F","G","H","I","J","K","L","M","N","O","P","Q","R","S","T","U","V","W","X","Y","Z",
    "√Ä","√Ç","√Ñ","√á","√â","√à","√ä","√ã","√é","√è","√î","√ñ","√ô","√õ","√ú","≈∏","≈í","√Ü",
    "0","1","2","3","4","5","6","7","8","9",
    ".","‚Ä¶",",",";","!","?",":","'","-","_","{","}","/",
    "@","#","$","%","&","*","+","=","~","^","`","<",">",
    " ","(",")"
]

# --- FONCTION D'AFFICHAGE HORODAT√â DANS LE RESULTAT ---
def add_time_message(message):
    t = str(int(round(monotonic(),0)))
    entry_result.insert(tk.END, f"TIME : {t} || {message}\n")
    entry_result.see(tk.END)

# --- FONCTIONS DE CL√â ---
def generate_small_key():
    caract√®res = list(ressources_caract√®res)
    key = []
    for i in range(len(caract√®res)):
        c = randint(0,len(caract√®res)-1)
        key.append(caract√®res[c])
        del caract√®res[c]
    return "".join(key)

def generate_key():
    key1 = generate_small_key()
    key2 = generate_small_key()
    key_drop = key1 + key2
    entry_key.delete(0, tk.END)
    entry_key.insert(0, key_drop)
    add_time_message("Cl√© g√©n√©r√©e !")

    if messagebox.askyesno("Envoyer par email", "Voulez-vous envoyer la cl√© par email ?"):
        dest = simpledialog.askstring("Email", "Adresse email du destinataire :")
        if dest:
            send_email(dest, "Votre cl√© secr√®te", f"Voici votre cl√© :\n{key_drop}")

# --- FONCTION D'ENVOI EMAIL ---
def send_email(destinataire, subject, contenu):
    expediteur = "gs.dev.mra@gmail.com"
    mdp = "xodu xxti alvq lhup"
    serveur_smtp = "smtp.gmail.com"
    port_smtp = 587

    message = MIMEText(contenu)
    message["Subject"] = subject
    message["From"] = expediteur
    message["To"] = destinataire

    try:
        with smtplib.SMTP(serveur_smtp, port_smtp) as server:
            server.starttls()
            server.login(expediteur, mdp)
            server.sendmail(expediteur, destinataire, message.as_string())
        add_time_message("Email envoy√© avec succ√®s !")
    except Exception as e:
        messagebox.showerror("Erreur", f"Erreur lors de l'envoi : {e}")

# --- FONCTION DE V√âRIFICATION DE CL√â ---
def verify_key(recup_key):
    if len(recup_key) != 254:
        messagebox.showerror("Erreur", "La cl√© doit contenir 254 caract√®res !")
        return None, None
    
    key1_list = [recup_key[i] for i in range(127)]
    key2_list = [recup_key[i] for i in range(127,254)]
    
    for c in key1_list:
        if key2_list.count(c) != 1:
            messagebox.showerror("Erreur", f"Erreur de cl√©, caract√®re dupliqu√© : {c}")
            return None, None
    add_time_message("Cl√© v√©rifi√©e avec succ√®s")
    return key1_list, key2_list

# --- CRYPTER ---
def crypter():
    text = entry_text.get("1.0", tk.END).strip()
    recup_key = entry_key.get().strip()

    add_time_message("V√©rification de la cl√© pour le cryptage...")
    key1_list, key2_list = verify_key(recup_key)
    if not key1_list:
        return

    add_time_message("Cryptage en cours...")
    try:
        crypted_text = "".join([key1_list[key2_list.index(c)] for c in text])
    except ValueError as e:
        messagebox.showerror("Erreur", f"Caract√®re non reconnu : {e}")
        return

    entry_result.insert(tk.END, f"TIME : {int(round(monotonic(),0))} || Texte crypt√© : {crypted_text}\n")

    if messagebox.askyesno("Envoyer par email", "Voulez-vous envoyer le texte crypt√© par email ?"):
        dest = simpledialog.askstring("Email", "Adresse email du destinataire :")
        if dest:
            contenu = f"""Cl√© utilis√©e :\n{recup_key}\n\nTexte original :\n{text}\n\nTexte crypt√© :\n{crypted_text}"""
            send_email(dest, "R√©sultat du cryptage", contenu)

# --- D√âCRYPTER ---
def d√©crypter():
    text = entry_text.get("1.0", tk.END).strip()
    recup_key = entry_key.get().strip()

    add_time_message("V√©rification de la cl√© pour le d√©cryptage...")
    key1_list, key2_list = verify_key(recup_key)
    if not key1_list:
        return

    add_time_message("D√©cryptage en cours...")
    try:
        uncrypted_text = "".join([key2_list[key1_list.index(c)] for c in text])
    except ValueError as e:
        messagebox.showerror("Erreur", f"Caract√®re non reconnu : {e}")
        return

    entry_result.insert(tk.END, f"TIME : {int(round(monotonic(),0))} || Texte d√©crypt√© : {uncrypted_text}\n")

    if messagebox.askyesno("Envoyer par email", "Voulez-vous envoyer le texte d√©crypt√© par email ?"):
        dest = simpledialog.askstring("Email", "Adresse email du destinataire :")
        if dest:
            contenu = f"""Cl√© utilis√©e :\n{recup_key}\n\nTexte crypt√© :\n{text}\n\nTexte d√©crypt√© :\n{uncrypted_text}"""
            send_email(dest, "R√©sultat du d√©cryptage", contenu)

# --- INTERFACE ---
root = tk.Tk()
root.title("Cryptage/D√©cryptage avec TIME")
root.geometry("800x600")

tk.Label(root, text="Texte √† crypter/d√©crypter :").pack()
entry_text = tk.Text(root, height=8)
entry_text.pack()

tk.Label(root, text="Cl√© (254 caract√®res) :").pack()
entry_key = tk.Entry(root, width=100)
entry_key.pack()

frame_buttons = tk.Frame(root)
frame_buttons.pack(pady=10)

tk.Button(frame_buttons, text="G√©n√©rer cl√©", width=15, command=generate_key).grid(row=0, column=0, padx=5)
tk.Button(frame_buttons, text="üîí Crypter", width=15, command=crypter).grid(row=0, column=1, padx=5)
tk.Button(frame_buttons, text="üîì D√©crypter", width=15, command=d√©crypter).grid(row=0, column=2, padx=5)

tk.Label(root, text="R√©sultat :").pack()
entry_result = tk.Text(root, height=10)
entry_result.pack()

root.mainloop()
